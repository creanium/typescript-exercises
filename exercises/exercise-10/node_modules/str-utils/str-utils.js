var strUtils = this;

strUtils.abbreviate = function (string, maxWidth, offset) {
    if (strUtils.isEmpty(string)) {
        return null;
    }

    if (offset >= 4) {
        return '...' + String(string).substring(offset, maxWidth) + '...';
    }

    return String(string).substring(0, maxWidth) + '...';
};

strUtils.abbreviateMiddle = function (string, middle, length) {
    if (strUtils.isEmpty(string)) {
        return null;
    }

    string = String(string);

    if (length > 0 && length < string.length) {
        return string.substring(0, length) + middle + string.substring(length);
    }

    return string;
};

strUtils.appendIfMissing = function (string, suffix, suffixes) {
    var endsWith = false;

    if (strUtils.isEmpty(string)) {
        return string;
    }

    string = String(string);
    suffix = String(suffix);

    if (suffixes !== undefined && suffixes.length > 0) {
        endsWith = suffixes.every(function (s) {
            return this.endsWith(string, String(s));
        }.bind(this));
    } else {
        endsWith = this.endsWith(string, suffix);
    }

    return !endsWith ? string += suffix : string;
};

strUtils.capitalize = function (string) {
    if (strUtils.isEmpty(string)) {
        return null;
    }

    string = String(string);

    return string.substring(0, 1).toUpperCase() + string.substring(1);
};

strUtils.chomp = function (string) {
    var regexp = /[\n\r]{1}$/;

    if (strUtils.isEmpty(string)) {
        return null;
    }

    return string.replace(regexp, '');
};

strUtils.difference = function (string, comparison) {
    if (strUtils.isEmpty(string) || strUtils.isEmpty(comparison)) {
        return null;
    }

    var position = 0,
        stringArray = String(string).split(''),
        comparisonArray = String(comparison).split('');

    stringArray.forEach(function (char, index) {
        if (char === comparisonArray[index]) {
            position = index + 1;
        }
    });

    return comparisonArray.join('').substring(position);
};

strUtils.endsWith = function (string, suffix) {
    string = String(string);
    suffix = String(suffix);

    return string.indexOf(suffix) === string.length - suffix.length;
};

strUtils.endsWithIgnoreCase = function (string, suffix) {
    return this.endsWith(String(string).toLowerCase(), String(suffix).toLowerCase());
};

strUtils.endsWithAny = function (string, suffixArray) {
    return suffixArray.some(function (suffix) {
        return this.endsWith(string, suffix);
    }.bind(this));
};

strUtils.indexOfDifference = function (string, comparison) {
    return String(string) === String(comparison) ? -1 : String(comparison).indexOf(this.difference(string, comparison));
};

strUtils.isAllLowercase = function (string) {
    if (strUtils.isEmpty(string)) {
        return false;
    }

    return /^[a-z]*$/.test(string);
};

strUtils.isAllUppercase = function (string) {
    if (strUtils.isEmpty(string)) {
        return false;
    }

    return /^[A-Z]*$/.test(string);
};

strUtils.isAnyEmpty = function () {
    var stringArray = Array.prototype.slice.call(arguments);

    return stringArray.some(function (string) {
        return strUtils.isEmpty(string);
    });
};

strUtils.isEmpty = function (string) {
    return (string == null || string.length == 0);
};

strUtils.isNoneEmpty = function () {
    var stringArray = Array.prototype.slice.call(arguments);

    return stringArray.every(function (string) {
        return strUtils.isNotEmpty(String(string));
    });
};

strUtils.isNotEmpty = function (string) {
    return (string !== null && string.length > 0);
};

strUtils.leftPad = function (string, length, char) {
    var padString = '';

    char = char !== undefined ? String(char) : '';

    for (var i = 0; i < length; i++) {
        if (char.length > 0) {
            padString += String(char);
        } else {
            padString += ' ';
        }
    }

    return padString + String(string);
};

strUtils.normalizeSpace = function (string) {
    return String(string).replace(/\s\s+/g, ' ').trim();
};

strUtils.prependIfMissing = function (string, prefix, prefixes) {
    var startsWith = false;

    if (strUtils.isEmpty(string)) {
        return string;
    }

    string = String(string);
    prefix = String(prefix);

    if (prefixes !== undefined && prefixes.length > 0) {
        startsWith = prefixes.every(function (s) {
            return strUtils.startsWith(string, String(s));
        }.bind(this));
    } else {
        startsWith = this.startsWith(string, prefix);
    }

    return !startsWith ? prefix + string : string;
};

strUtils.removeEnd = function (string, remove) {
    var position;

    if (strUtils.isEmpty(string)) {
        return null;
    }

    string = String(string);
    remove = String(remove);
    position = string.indexOf(remove);

    if (position === string.length - remove.length) {
        return string.substring(0, position);
    } else {
        return string;
    }
};

strUtils.removeEndIgnoreCase = function (string, remove) {
    var position,
        tempString;

    if (strUtils.isEmpty(string)) {
        return null;
    }

    string = String(string);
    tempString = string;
    remove = String(remove).toLowerCase();
    string = string.toLowerCase();
    position = string.indexOf(remove);

    if (position === string.length - remove.length) {
        return tempString.substring(0, position);
    } else {
        return tempString;
    }
};

strUtils.removeStart = function (string, remove) {
    if (strUtils.isEmpty(string)) {
        return null;
    }

    string = String(string);
    remove = String(remove);

    if (string.indexOf(remove) === 0) {
        return string.substring(remove.length);
    } else {
        return string;
    }
};

strUtils.removeStartIgnoreCase = function (string, remove) {
    var tempString;

    if (strUtils.isEmpty(string)) {
        return null;
    }

    string = String(string);
    tempString = string;
    remove = String(remove).toLowerCase();
    string = string.toLowerCase();

    if (string.indexOf(remove) === 0) {
        return tempString.substring(remove.length);
    } else {
        return tempString;
    }
};

strUtils.rightPad = function (string, length, char) {
    var padString = '';

    char = char !== undefined ? String(char) : '';

    for (var i = 0; i < length; i++) {
        if (char.length > 0) {
            padString += String(char);
        } else {
            padString += ' ';
        }
    }

    return String(string) + padString;
};

strUtils.startsWith = function (string, prefix) {
    return String(string).indexOf(String(prefix)) === 0;
};

strUtils.startsWithIgnoreCase = function (string, prefix) {
    return this.startsWith(String(string).toLowerCase(), String(prefix).toLowerCase());
};

strUtils.startsWithAny = function (string, prefixArray) {
    return prefixArray.some(function (prefix) {
        return this.startsWith(string, prefix);
    }.bind(this));
};

strUtils.swapCase = function (string) {
    var returnString = '';

    if (strUtils.isEmpty(string)) {
        return null;
    }

    string.split('').forEach(function (character) {
        if (character === character.toUpperCase()) {
            returnString += character.toLowerCase();
        } else {
            returnString += character.toUpperCase();
        }
    });

    return returnString;
};

strUtils.uncapitalize = function (string) {
    if (strUtils.isEmpty(string)) {
        return null;
    }

    string = String(string);

    return string.substring(0, 1).toLowerCase() + string.substring(1);
};

strUtils.wrap = function (string, char) {
    return String(char) + String(string) + String(char);
};

module.exports = strUtils;