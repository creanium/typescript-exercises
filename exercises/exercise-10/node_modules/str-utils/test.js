var strutils = require('./'),
    test = require('tape');

test('abbreviate, no offset', function (assert) {
    assert.plan(11);
    assert.strictEqual(strutils.abbreviate('Java is to JavaScript as Car is to Carpet.', 21), "Java is to JavaScript...");
    assert.strictEqual(strutils.abbreviate('Java is to JavaScript as Car is to Carpet.', 15), "Java is to Java...");
    assert.strictEqual(strutils.abbreviate('Java is to JavaScript as Car is to Carpet.y', 13), "Java is to Ja...");
    assert.strictEqual(strutils.abbreviate('Java is to JavaScript as Car is to Carpet.y', 13), "Java is to Ja...");
    assert.strictEqual(strutils.abbreviate('Java is to JavaScript as Car is to Carpet.', 9), "Java is t...");
    assert.strictEqual(strutils.abbreviate('Java is to JavaScript as Car is to Carpet.', 6), "Java i...");
    assert.strictEqual(strutils.abbreviate(123456790, 6), "123456...");
    assert.strictEqual(strutils.abbreviate([1, 2, 3, 4], 2), "1,...");
    assert.strictEqual(strutils.abbreviate({}, 2), "[o...");
    assert.strictEqual(strutils.abbreviate(true, 2), "tr...");
    assert.strictEqual(strutils.abbreviate(null, 2), null);
});

test('abbreviate, offset', function (assert) {
    assert.plan(10);
    assert.strictEqual(strutils.abbreviate('Java is to JavaScript as Car is to Carpet.', 21, -1), "Java is to JavaScript...");
    assert.strictEqual(strutils.abbreviate('Java is to JavaScript as Car is to Carpet.', 15, 0), "Java is to Java...");
    assert.strictEqual(strutils.abbreviate('Java is to JavaScript as Car is to Carpet.', 15, 1), "Java is to Java...");
    assert.strictEqual(strutils.abbreviate('Java is to JavaScript as Car is to Carpet.', 15, 4), "... is to Java...");
    assert.strictEqual(strutils.abbreviate('Java is to JavaScript as Car is to Carpet.', 15, 10), "... Java...");
    assert.strictEqual(strutils.abbreviate(123456790, 6, 4), "...56...");
    assert.strictEqual(strutils.abbreviate([1, 2, 3, 4], 2), "1,...");
    assert.strictEqual(strutils.abbreviate({}, 2), "[o...");
    assert.strictEqual(strutils.abbreviate(true, 2), "tr...");
    assert.strictEqual(strutils.abbreviate(null, 2, 1), null);
});

test('abbreviate middle', function (assert) {
    assert.plan(7);
    assert.strictEqual(strutils.abbreviateMiddle('Hello', '..', 3), 'Hel..lo');
    assert.strictEqual(strutils.abbreviateMiddle('Hello', '..', 5), 'Hello');
    assert.strictEqual(strutils.abbreviateMiddle(1234516, '..', 4), '1234..516');
    assert.strictEqual(strutils.abbreviateMiddle({}, '..', 4), '[obj..ect Object]');
    assert.strictEqual(strutils.abbreviateMiddle(true, '..', 5), 'true');
    assert.strictEqual(strutils.abbreviateMiddle(true, '..', 3), 'tru..e');
    assert.strictEqual(strutils.abbreviateMiddle(null, '..', 1), null);
});

test('appendIfMissing', function (assert) {
    assert.plan(6);
    assert.strictEqual(strutils.appendIfMissing('Hello', 'xyz'), 'Helloxyz');
    assert.strictEqual(strutils.appendIfMissing('Hello', 'xyz', ['llo']), 'Hello');
    assert.strictEqual(strutils.appendIfMissing('Hello', 'abc', ['xyz', '123', 'abc']), 'Helloabc');
    assert.strictEqual(strutils.appendIfMissing('Hello', 'abc', ['xyz', '123', 'abc', 'LLO']), 'Helloabc');
    assert.strictEqual(strutils.appendIfMissing('Hello', 'LLO'), 'HelloLLO');
    assert.strictEqual(strutils.appendIfMissing(null, 'LLO'), null);
});

test('prependIfMissing', function (assert) {
    assert.plan(6);
    assert.strictEqual(strutils.prependIfMissing('Hello', 'xyz'), 'xyzHello');
    assert.strictEqual(strutils.prependIfMissing('Hello', 'Hel'), 'Hello');
    assert.strictEqual(strutils.prependIfMissing('Hello', 'Hel', ['ell', 'llo']), 'HelHello');
    assert.strictEqual(strutils.prependIfMissing('Hello', 'Hel', ['hel', 'llo']), 'HelHello');
    assert.strictEqual(strutils.prependIfMissing('Hello', 'Hel', ['He', 'Hel']), 'Hello');
    assert.strictEqual(strutils.prependIfMissing(null, 'Hel', ['Hel', 'hel']), null);
});

test('capitalize', function (assert) {
    assert.plan(5);
    assert.strictEqual(strutils.capitalize('i am a human'), 'I am a human');
    assert.strictEqual(strutils.capitalize('cAT'), 'CAT');
    assert.strictEqual(strutils.capitalize(null), null);
    assert.strictEqual(strutils.capitalize('lowercase'), 'Lowercase');
    assert.strictEqual(strutils.capitalize(12345), '12345');
});

test('chomp', function (assert) {
    assert.plan(5);
    assert.strictEqual(strutils.chomp('Single\n'), 'Single');
    assert.strictEqual(strutils.chomp('Double\n\r'), 'Double\n');
    assert.strictEqual(strutils.chomp('Triple\n\r\r'), 'Triple\n\r');
    assert.strictEqual(strutils.chomp('Quadruple\n\r\n\r'), 'Quadruple\n\r\n');
    assert.strictEqual(strutils.chomp(null), null);
});

test('difference', function (assert) {
    assert.plan(8);
    assert.strictEqual(strutils.difference('I am a human', 'I am a machine'), 'machine');
    assert.strictEqual(strutils.difference('I am a machine', 'I am a human'), 'human');
    assert.strictEqual(strutils.difference('Hello', 'Hexyz'), 'xyz');
    assert.strictEqual(strutils.difference('Hexyz', 'Hello'), 'llo');
    assert.strictEqual(strutils.difference('Hello', 'xyz'), 'xyz');
    assert.strictEqual(strutils.difference('Hello', 'Hello'), '');
    assert.strictEqual(strutils.difference('Hello', 'Hell'), '');
    assert.strictEqual(strutils.difference(null, null), null);
});

test('endsWith', function (assert) {
    assert.plan(5);
    assert.strictEqual(strutils.endsWith('Hello', 'llo'), true);
    assert.strictEqual(strutils.endsWith('Hello', 'Llo'), false);
    assert.strictEqual(strutils.endsWith(null, null), true);
    assert.strictEqual(strutils.endsWith(null, 'abc'), false);
    assert.strictEqual(strutils.endsWith('abcdef', null), false);
});

test('endsWithIgnoreCase', function (assert) {
    assert.plan(5);
    assert.strictEqual(strutils.endsWithIgnoreCase('Hello', 'LLO'), true);
    assert.strictEqual(strutils.endsWithIgnoreCase('Hello', 'llo'), true);
    assert.strictEqual(strutils.endsWithIgnoreCase(null, null), true);
    assert.strictEqual(strutils.endsWithIgnoreCase(null, 'abc'), false);
    assert.strictEqual(strutils.endsWithIgnoreCase('abcdef', null), false);
});

test('endsWithAny', function (assert) {
    assert.plan(2);
    assert.strictEqual(strutils.endsWithAny('abc', ['ab', 'ba']), false);
    assert.strictEqual(strutils.endsWithAny('abc', ['bc', 'b']), true);
});

test('indexOfDifference', function (assert) {
    assert.plan(6);
    assert.strictEqual(strutils.indexOfDifference(null, null), -1);
    assert.strictEqual(strutils.indexOfDifference('', null), 0);
    assert.strictEqual(strutils.indexOfDifference(null, ''), -1);
    assert.strictEqual(strutils.indexOfDifference('ij', 'ijyx'), 2);
    assert.strictEqual(strutils.indexOfDifference('ij', 'ij'), -1);
    assert.strictEqual(strutils.indexOfDifference('abcde', 'abxyz'), 2);
});

test('isAllLowercase', function (assert) {
    assert.plan(5);
    assert.strictEqual(strutils.isAllLowercase('asdfb'), true);
    assert.strictEqual(strutils.isAllLowercase('ASDF'), false);
    assert.strictEqual(strutils.isAllLowercase('ASfsdF'), false);
    assert.strictEqual(strutils.isAllLowercase(12345), false);
    assert.strictEqual(strutils.isAllLowercase(null), false);
});

test('isAllUppercase', function (assert) {
    assert.plan(5);
    assert.strictEqual(strutils.isAllUppercase('asdfb'), false);
    assert.strictEqual(strutils.isAllUppercase('ASDF'), true);
    assert.strictEqual(strutils.isAllUppercase('ASfsdF'), false);
    assert.strictEqual(strutils.isAllUppercase(12345), false);
    assert.strictEqual(strutils.isAllUppercase(null), false);
});

test('isAnyEmpty', function (assert) {
    assert.plan(5);
    assert.strictEqual(strutils.isAnyEmpty('', 'abc'), true);
    assert.strictEqual(strutils.isAnyEmpty('bde', 'abc'), false);
    assert.strictEqual(strutils.isAnyEmpty('bde', 'abc', 123, 'asdf'), false);
    assert.strictEqual(strutils.isAnyEmpty('bde', 'abc', 123, 'asdf', ' '), false);
    assert.strictEqual(strutils.isAnyEmpty('bde', 'abc', 123, 'asdf', ' ', ''), true);
});

test('isEmpty', function (assert) {
    assert.plan(5);
    assert.strictEqual(strutils.isEmpty(null), true);
    assert.strictEqual(strutils.isEmpty(' '), false);
    assert.strictEqual(strutils.isEmpty(''), true);
    assert.strictEqual(strutils.isEmpty('   string'), false);
    assert.strictEqual(strutils.isEmpty('string'), false);
});

test('isNoneEmpty', function (assert) {
    assert.plan(5);
    assert.strictEqual(strutils.isNoneEmpty('', 'abc'), false);
    assert.strictEqual(strutils.isNoneEmpty('bde', 'abc'), true);
    assert.strictEqual(strutils.isNoneEmpty('bde', 'abc', 123, 'asdf'), true);
    assert.strictEqual(strutils.isNoneEmpty('bde', 'abc', 123, 'asdf', ' '), true);
    assert.strictEqual(strutils.isNoneEmpty('bde', 'abc', 123, 'asdf', ' ', ''), false);
});

test('isNotEmpty', function (assert) {
    assert.plan(5);
    assert.strictEqual(strutils.isNotEmpty(null), false);
    assert.strictEqual(strutils.isNotEmpty(' '), true);
    assert.strictEqual(strutils.isNotEmpty(''), false);
    assert.strictEqual(strutils.isNotEmpty('   string'), true);
    assert.strictEqual(strutils.isNotEmpty('string'), true);
});

test('leftPad', function (assert) {
    assert.plan(3);
    assert.strictEqual(strutils.leftPad('Hello', 0), 'Hello');
    assert.strictEqual(strutils.leftPad('Hello', 4), '    Hello');
    assert.strictEqual(strutils.leftPad('Hello', 4, '$'), '$$$$Hello');
});

test('normalizeSpace', function (assert) {
    assert.plan(5);
    assert.strictEqual(strutils.normalizeSpace('This is a normal sentence.'), 'This is a normal sentence.');
    assert.strictEqual(strutils.normalizeSpace('This     is     a poorly-formatted        sentence.'), 'This is a poorly-formatted sentence.');
    assert.strictEqual(strutils.normalizeSpace('This is a \n sentence with a line feed character.'), 'This is a sentence with a line feed character.');
    assert.strictEqual(strutils.normalizeSpace('This is a \r\n sentence with a carriage return and a line feed character.'), 'This is a sentence with a carriage return and a line feed character.');
    assert.strictEqual(strutils.normalizeSpace('This is    a poorly-formatted \r\n sentence     with a carriage      return and a line feed character.'), 'This is a poorly-formatted sentence with a carriage return and a line feed character.');
});

test('removeEnd', function (assert) {
    assert.plan(5);
    assert.strictEqual(strutils.removeEnd('Hello', 'llo'), 'He');
    assert.strictEqual(strutils.removeEnd('Hello', 'LLO'), 'Hello');
    assert.strictEqual(strutils.removeEnd('Hello ', 'llo'), 'Hello ');
    assert.strictEqual(strutils.removeEnd('Hello', null), 'Hello');
    assert.strictEqual(strutils.removeEnd(null, 'll'), null);
});

test('removeEndIgnoreCase', function (assert) {
    assert.plan(6);
    assert.strictEqual(strutils.removeEndIgnoreCase('Hello', 'llo'), 'He');
    assert.strictEqual(strutils.removeEndIgnoreCase('Hello', 'LLO'), 'He');
    assert.strictEqual(strutils.removeEndIgnoreCase('HELLO', 'llo'), 'HE');
    assert.strictEqual(strutils.removeEndIgnoreCase('Hello ', 'llo'), 'Hello ');
    assert.strictEqual(strutils.removeEndIgnoreCase('Hello', null), 'Hello');
    assert.strictEqual(strutils.removeEndIgnoreCase(null, 'll'), null);
});

test('removeStart', function (assert) {
    assert.plan(4);
    assert.strictEqual(strutils.removeStart('Hello', 'He'), 'llo');
    assert.strictEqual(strutils.removeStart('Hello', 'HE'), 'Hello');
    assert.strictEqual(strutils.removeStart('Hello', null), 'Hello');
    assert.strictEqual(strutils.removeStart(null, 'll'), null);
});

test('removeStartIgnoreCase', function (assert) {
    assert.plan(5);
    assert.strictEqual(strutils.removeStartIgnoreCase('Hello', 'he'), 'llo');
    assert.strictEqual(strutils.removeStartIgnoreCase('Hello', 'HE'), 'llo');
    assert.strictEqual(strutils.removeStartIgnoreCase('HELLO', 'he'), 'LLO');
    assert.strictEqual(strutils.removeStartIgnoreCase('Hello', null), 'Hello');
    assert.strictEqual(strutils.removeStartIgnoreCase(null, 'll'), null);
});

test('rightPad', function (assert) {
    assert.plan(3);
    assert.strictEqual(strutils.rightPad('Hello', 0), 'Hello');
    assert.strictEqual(strutils.rightPad('Hello', 4), 'Hello    ');
    assert.strictEqual(strutils.rightPad('Hello', 4, '$'), 'Hello$$$$');
});

test('startsWith', function (assert) {
    assert.plan(5);
    assert.strictEqual(strutils.startsWith('Hello', 'He'), true);
    assert.strictEqual(strutils.startsWith('Hello', 'he'), false);
    assert.strictEqual(strutils.startsWith(null, null), true);
    assert.strictEqual(strutils.startsWith(null, 'abc'), false);
    assert.strictEqual(strutils.startsWith('abcdef', null), false);
});

test('startsWithIgnoreCase', function (assert) {
    assert.plan(5);
    assert.strictEqual(strutils.startsWithIgnoreCase('Hello', 'He'), true);
    assert.strictEqual(strutils.startsWithIgnoreCase('Hello', 'he'), true);
    assert.strictEqual(strutils.startsWithIgnoreCase(null, null), true);
    assert.strictEqual(strutils.startsWithIgnoreCase(null, 'abc'), false);
    assert.strictEqual(strutils.startsWithIgnoreCase('abcdef', null), false);
});

test('startsWithAny', function (assert) {
    assert.plan(2);
    assert.strictEqual(strutils.startsWithAny('abc', ['ab', 'ba']), true);
    assert.strictEqual(strutils.startsWithAny('abc', ['bc', 'b']), false);
});

test('swapCase', function (assert) {
    assert.plan(3);
    assert.strictEqual(strutils.swapCase('THis iS A sTriNg'), 'thIS Is a StRInG');
    assert.strictEqual(strutils.swapCase('this is a string'), 'THIS IS A STRING');
    assert.strictEqual(strutils.swapCase('THIS IS A STRING'), 'this is a string');
});

test('uncapitalize', function (assert) {
    assert.plan(3);
    assert.strictEqual(strutils.uncapitalize('Cat'), 'cat');
    assert.strictEqual(strutils.uncapitalize('cAT'), 'cAT');
    assert.strictEqual(strutils.uncapitalize(null), null);
});

test('wrap', function (assert) {
    assert.plan(2);
    assert.strictEqual(strutils.wrap('hello', ''), 'hello');
    assert.strictEqual(strutils.wrap('hello', '"'), '"hello"');
});